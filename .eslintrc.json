{
  "root": true,
  "ignorePatterns": [
    "projects/**/*"
  ],
  "overrides": [
    {
      "files": [
        "*.ts"
      ],
      "parserOptions": {
        "project": [
          "tsconfig.json",
          "e2e/tsconfig.json"
        ],
        "createDefaultProgram": true
      },
      "extends": [
        "plugin:@angular-eslint/recommended",
        "plugin:@angular-eslint/template/process-inline-templates"
      ],
      "rules": {
        "@angular-eslint/component-selector": [
          "error",
          {
            "prefix": "kip",
            "style": "kebab-case",
            "type": "element"
          }
        ],
        "@angular-eslint/directive-selector": [
          "error",
          {
            "prefix": "kip",
            "style": "camelCase",
            "type": "attribute"
          }
        ],
        // ANGULAR SPECIFIC RULES
        // https://github.com/angular-eslint/angular-eslint#readme
        "@angular-eslint/component-class-suffix": "error",
        "@angular-eslint/contextual-decorator": "error",
        "@angular-eslint/contextual-lifecycle": "error",
        "@angular-eslint/directive-class-suffix": "error",
        "@angular-eslint/no-attribute-decorator": "error",
        "@angular-eslint/no-conflicting-lifecycle": "error",
        "@angular-eslint/no-empty-lifecycle-method": "error",
        "@angular-eslint/no-forward-ref": "error",
        "@angular-eslint/no-host-metadata-property": "error",
        "@angular-eslint/no-input-prefix": "error",
        "@angular-eslint/no-input-rename": "error",
        "@angular-eslint/no-inputs-metadata-property": "error",
        "@angular-eslint/no-lifecycle-call": "error",
        "@angular-eslint/no-output-native": "error",
        "@angular-eslint/no-output-on-prefix": "error",
        "@angular-eslint/no-output-rename": "error",
        "@angular-eslint/no-outputs-metadata-property": "error",
        "@angular-eslint/no-pipe-impure": "error",
        "@angular-eslint/no-queries-metadata-property": "error",
        "@angular-eslint/prefer-on-push-component-change-detection": "error",
        "@angular-eslint/prefer-output-readonly": "warn",
        "@angular-eslint/relative-url-prefix": "error",
        "@angular-eslint/use-component-selector": "error",
        "@angular-eslint/use-component-view-encapsulation": "error",
        "@angular-eslint/use-injectable-provided-in": "error", // look at fixing this
        "@angular-eslint/use-lifecycle-interface": "error",
        "@angular-eslint/use-pipe-transform-interface": "error",
        /* GENERAL ERRORS */
        /*"no-console": "error", Review and Remove */
        "no-dupe-else-if": "error",
        "no-import-assign": "error",
        "no-setter-return": "error",
        "no-template-curly-in-string": "error",
        /* BEST PRACTICES */
        "accessor-pairs": "error",
        "array-callback-return": "error",
        "consistent-return": "error",
        "eqeqeq": "error",
        /*  "default-case": "error", */
        "max-len": [
          "error",
          {
            "code": 200
          }
        ],
        /* "no-alert": "error", Review and Remove */
        "no-eval": "error",
        "no-fallthrough": "error",
        "no-labels": "error",
        "no-param-reassign": "error",
        "no-sequences": "error",
        "no-unused-expressions": "error",
        "no-useless-concat": "error",
        "radix": [
          "error",
          "always"
        ],
        "vars-on-top": "error",
        /* "max-params": ["error", { "max": 3 }], */
        /* ECMASCRIPT */
        /*  "arrow-body-style": [
          "error",
          "as-needed"
        ],*/
        "arrow-parens": [
          "error",
          "as-needed"
        ],
        "arrow-spacing": "error",
        "constructor-super": "error",
        "no-confusing-arrow": "off", // seems to conflict with no extra parens
        "no-dupe-class-members": "error",
        "no-duplicate-imports": "error",
        "no-this-before-super": "error",
        "no-useless-computed-key": "error",
        /* "object-shorthand": "error", not sure if I like this one */
        "prefer-arrow-callback": "error",
        "prefer-const": "error",
        "prefer-rest-params": "error",
        "prefer-template": "error",
        "sort-imports": [
          "off",
          {
            "ignoreCase": false,
            "ignoreDeclarationSort": false,
            "ignoreMemberSort": false,
            "memberSyntaxSortOrder": [
              "none",
              "all",
              "multiple",
              "single"
            ]
          }
        ], // investigate when I have time
        "template-curly-spacing": [
          "error",
          "never"
        ],
        /* TYPESCRIPT SUPPORTED RULES */
        "@typescript-eslint/adjacent-overload-signatures": "error",
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "array"
          }
        ],
        "@typescript-eslint/await-thenable": "error",
        "@typescript-eslint/ban-ts-comment": "error",
        "@typescript-eslint/class-literal-property-style": [
          "error",
          "fields"
        ],
        "@typescript-eslint/consistent-indexed-object-style": [
          "error",
          "index-signature"
        ],
        "@typescript-eslint/consistent-type-assertions": "error",
        "@typescript-eslint/consistent-type-definitions": [
          "error",
          "interface"
        ],
        "@typescript-eslint/consistent-type-exports": "off",
        "@typescript-eslint/consistent-type-imports": "off",
        "@typescript-eslint/explicit-function-return-type": "off", // doesn't really add much
        "@typescript-eslint/explicit-member-accessibility": "off", // seems a waste of time
        "@typescript-eslint/explicit-module-boundary-types": "off",
        "@typescript-eslint/member-delimiter-style": [
          "error",
          {
            "multiline": {
              "delimiter": "semi",
              "requireLast": true
            },
            "singleline": {
              "delimiter": "comma",
              "requireLast": false
            }
          }
        ],
        "@typescript-eslint/member-ordering": [
          "error",
          {
            "default": [
              "private-field",
              "protected-field",
              "public-field",
              "constructor",
              "static-method",
              "public-method",
              "protected-method",
              "private-method"
            ]
          }
        ],
        "@typescript-eslint/method-signature-style": "error",
        "@typescript-eslint/naming-convention": [
          "error",
          {
            "selector": "memberLike",
            "format": [
              "camelCase"
            ],
            "leadingUnderscore": "allow"
          },
          {
            "selector": "enumMember",
            "format": [
              "PascalCase"
            ]
          },
          {
            "selector": "typeParameter",
            "format": [
              "PascalCase"
            ],
            "prefix": [
              "T"
            ]
          }
        ],
        "@typescript-eslint/no-base-to-string": "error",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-confusing-void-expression": "off", // TO DO - look at this
        "@typescript-eslint/no-dynamic-delete": "error",
        "@typescript-eslint/no-empty-interface": [
          "error",
          {
            "allowSingleExtends": false
          }
        ],
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-extraneous-class": "off", // angular modules cause problems with this
        "@typescript-eslint/no-extra-non-null-assertion": "error",
        "@typescript-eslint/no-floating-promises": "off",
        "@typescript-eslint/no-for-in-array": "error",
        "@typescript-eslint/no-implicit-any-catch": "error",
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-implied-eval": "error",
        "@typescript-eslint/no-inferrable-types": "error",
        "@typescript-eslint/no-meaningless-void-operator": [
          "error",
          {
            "checkNever": false
          }
        ],
        "@typescript-eslint/no-misused-new": "error",
        "@typescript-eslint/no-misused-promises": "error",
        "@typescript-eslint/no-namespace": "error",
        "@typescript-eslint/no-non-null-asserted-optional-chain": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-non-null-assertion": "error",
        "@typescript-eslint/no-parameter-properties": "off", // no real value at all, every component does this
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-this-alias": "error",
        "@typescript-eslint/no-throw-literal": "error",
        "@typescript-eslint/no-type-alias": [
          "error",
          {
            "allowAliases": "in-unions"
          }
        ],
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-condition": "off", // while this is good, it may break things unexpectedly if the interfaces are wrong
        "@typescript-eslint/no-unnecessary-type-assertion": "error",
        "@typescript-eslint/no-unnecessary-qualifier": "error",
        "@typescript-eslint/no-unnecessary-type-arguments": "error",
        "@typescript-eslint/no-unnecessary-type-constraint": "error",
        "@typescript-eslint/no-unsafe-argument": "error",
        "@typescript-eslint/no-unsafe-assignment": "error",
        "@typescript-eslint/no-unsafe-call": "error",
        "@typescript-eslint/no-unsafe-member-access": "error",
        "@typescript-eslint/no-unsafe-return": "error",
        "@typescript-eslint/no-var-requires": "error",
        "@typescript-eslint/no-unused-vars": [
          "error",
          {
            "argsIgnorePattern": "^_"
          } // ignore if starting with _
        ],
        "@typescript-eslint/non-nullable-type-assertion-style": "error",
        "@typescript-eslint/prefer-as-const": "error",
        "@typescript-eslint/prefer-enum-initializers": "error",
        "@typescript-eslint/prefer-for-of": "error",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-includes": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/prefer-readonly-parameter-types": [
          "off",
          {
            "checkParameterProperties": false
          }
        ],
        "@typescript-eslint/prefer-reduce-type-parameter": "error",
        "@typescript-eslint/prefer-regexp-exec": "error",
        "@typescript-eslint/prefer-return-this-type": "off", // never going to use chaining so no real value
        "@typescript-eslint/prefer-string-starts-ends-with": "error", // IE
        "@typescript-eslint/prefer-ts-expect-error": "error",
        "@typescript-eslint/promise-function-async": "off", // never going to use this
        "@typescript-eslint/require-array-sort-compare": "error",
        "@typescript-eslint/sort-type-union-intersection-members": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/restrict-template-expressions": [
          "off",
          {
            "allowNumber": true,
            "allowBoolean": true,
            "allowNullable": false
          }
        ],
        "@typescript-eslint/strict-boolean-expressions": "off", // this would require a lot of changes
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        "@typescript-eslint/triple-slash-reference": "error",
        "@typescript-eslint/type-annotation-spacing": "error",
        "@typescript-eslint/typedef": "error",
        "@typescript-eslint/unbound-method": "error",
        "@typescript-eslint/unified-signatures": "error",
        /* TYPESCRIPT EXTENSION RULES - Generally need to turn off ESLint rule and override with typescript one */
        // extensions
        /*
        "brace-style": "off",
        "@typescript-eslint/brace-style": "error", // when I have time */
        "comma-dangle": "off",
        "@typescript-eslint/comma-dangle": [
          "error"
        ],
        "comma-spacing": "off",
        "@typescript-eslint/comma-spacing": [
          "error"
        ],
        "@typescript-eslint/default-param-last": "off",
        "no-extra-parens": "off",
        "@typescript-eslint/no-extra-parens": "error",
        "no-extra-semi": "off",
        "@typescript-eslint/no-extra-semi": "error",
        /*
    "no-magic-numbers": "off",
    "@typescript-eslint/no-magic-numbers": ["error", { "ignoreNumericLiteralTypes": true, "ignoreEnums": true, "ignoreReadonlyClassProperties": true }],
  */
        "@typescript-eslint/no-unused-expressions": [
          "error"
        ],
        "no-useless-constructor": "off",
        "@typescript-eslint/no-useless-constructor": "error",
        "quotes": "off",
        "@typescript-eslint/quotes": [
          "error",
          "single"
        ],
        "@typescript-eslint/return-await": "error",
        "semi": "off",
        "@typescript-eslint/semi": [
          "error"
        ]
      }
    },
    {
      "files": [
        "*.html"
      ],
      "extends": [
        "plugin:@angular-eslint/template/recommended"
      ],
      "rules": {
        // https://github.com/angular-eslint/angular-eslint#readme
        "@angular-eslint/template/accessibility-alt-text": "off",
        "@angular-eslint/template/accessibility-elements-content": "off",
        "@angular-eslint/template/accessibility-label-for": "off",
        "@angular-eslint/template/no-positive-tabindex": "off",
        "@angular-eslint/template/accessibility-table-scope": "off",
        "@angular-eslint/template/accessibility-valid-aria": "off",
        "@angular-eslint/template/banana-in-box": "error",
        "@angular-eslint/template/click-events-have-key-events": "off",
        "@angular-eslint/template/mouse-events-have-key-events": "off",
        "@angular-eslint/template/no-any": "error",
        "@angular-eslint/template/no-autofocus": "off",
        "@angular-eslint/template/no-distracting-elements": "off",
        "@angular-eslint/template/no-negated-async": "error",
        "@angular-eslint/template/no-call-expression": "error",
        "@angular-eslint/template/use-track-by-function": "off" // improves repaint - need to work through these
      }
    }
  ]
}
